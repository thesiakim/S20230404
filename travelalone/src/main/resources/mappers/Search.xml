<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.travelAlone.s20230404.SearchMapper">
	
	<!-- Search 테이블에 키워드가 존재하는 경우 update, 존재하지 않는다면 insert -->
	<insert id="siUpsert" parameterType="java.lang.String">
  		MERGE INTO search
  		USING dual
  		ON (s_keyword = #{keyword, jdbcType=VARCHAR})
  		WHEN MATCHED THEN
    		UPDATE SET s_count = s_count + 1, modified_date = sysdate
  		WHEN NOT MATCHED THEN
    	INSERT (search_id, s_keyword, s_count, create_date, modified_date)
    	VALUES (search_id_seq.nextval, #{keyword, jdbcType=VARCHAR}, 1, sysdate, sysdate)
	</insert>
	
	
	<!-- Travel 테이블의 t_name에 키워드가 존재하는 경우 t_count++ -->
	<update id="siTravelUpdate" parameterType="Travel">
		update Travel
		set t_count = t_count + 1
		where t_name LIKE '%' || #{keyword} || '%'
	</update>
	
	
	<!-- House 테이블의 h_name에 키워드가 존재하는 경우 h_count++ -->
	<update id="siHouseUpdate" parameterType="House">
		update House
		set h_count = h_count + 1
		where h_name LIKE '%' || #{keyword} || '%'
	</update>
	
	
	<!-- Restaurant 테이블의 r_name에 키워드가 존재하는 경우 r_count++ -->
	<update id="siResUpdate" parameterType="java.lang.String">
		update Restaurant
		set r_count = r_count + 1
		where r_name LIKE '%' || #{keyword} || '%'
	</update>
	
	
	<!-- Travel 테이블에 키워드가 존재하는지 조회 -->
	<select id="siTravelSearch" parameterType="Travel" resultType="Travel">
		SELECT *
		FROM (
		       SELECT t.travel_id, t.t_name, t.t_content, t.t_address, i.img_stored_file,
		       		  ROW_NUMBER() OVER (ORDER BY t.travel_id) AS row_num
		       FROM Travel t
		             LEFT JOIN (
		                        SELECT Tra_Img.*
		                        FROM (
		                              SELECT travel_id, MAX(img_id) AS max_img_id
		                               FROM Tra_Img
		                               GROUP BY travel_id
		                              ) max_img
		             INNER JOIN tra_img
		             ON max_img.travel_id = tra_img.travel_id
		             AND max_img.max_img_id = tra_img.img_id
		                         ) i ON t.travel_id = i.travel_id
		  WHERE     t.t_name LIKE '%' || #{keyword} || '%'
		      OR t.t_content LIKE '%' || #{keyword} || '%'
		      OR t.t_address LIKE '%' || #{keyword} || '%'
		)
		WHERE row_num BETWEEN #{start} AND #{end}
	</select>
	
	
	<!-- House 테이블에 키워드가 존재하는지 조회 -->
	<select id="siHouseSearch" parameterType="House" resultType="House">
	  	SELECT *
		FROM (
		       SELECT h.house_id, h.h_name, h.h_content, h.h_address, i.img_stored_file,
		       		  ROW_NUMBER() OVER (ORDER BY h.house_id) AS row_num
		       FROM House h
		             LEFT JOIN (
		                        SELECT Hou_Img.*
		                        FROM (
		                              SELECT house_id, MAX(img_id) AS max_img_id
		                               FROM Hou_Img
		                               GROUP BY house_id
		                              ) max_img
		             INNER JOIN Hou_Img
		             ON max_img.house_id = Hou_Img.house_id
		             AND max_img.max_img_id = Hou_Img.img_id
		                         ) i ON h.house_id = i.house_id
		  WHERE     h.h_name LIKE '%' || #{keyword} || '%'
		      OR h.h_content LIKE '%' || #{keyword} || '%'
		      OR h.h_address LIKE '%' || #{keyword} || '%'
		)
		WHERE row_num BETWEEN #{start} AND #{end}
	</select>
	
	
	<!-- Restaurant 테이블에 키워드가 존재하는지 조회 -->
	<select id="siResSearch" parameterType="Res" resultType="Res">
  		SELECT *
		FROM (
		       SELECT r.restaurant_id, r.r_name, r.r_content, r.r_address, r.r_menu, i.img_stored_file,
		       		  ROW_NUMBER() OVER (ORDER BY r.restaurant_id) AS row_num
		       FROM Restaurant r
		             LEFT JOIN (
		                        SELECT Res_Img.*
		                        FROM (
		                              SELECT restaurant_id, MAX(img_id) AS max_img_id
		                               FROM Res_Img
		                               GROUP BY restaurant_id
		                              ) max_img
		             INNER JOIN Res_Img
		             ON max_img.restaurant_id = Res_Img.restaurant_id
		             AND max_img.max_img_id = Res_Img.img_id
		                         ) i ON r.restaurant_id = i.restaurant_id
		  WHERE     r.r_name LIKE '%' || #{keyword} || '%'
		      OR r.r_content LIKE '%' || #{keyword} || '%'
		      OR r.r_address LIKE '%' || #{keyword} || '%'
		      OR r.r_menu LIKE '%' || #{keyword} || '%'
		)
		WHERE row_num BETWEEN #{start} AND #{end}
	</select>
	
	
	<!-- Board 테이블에 키워드가 존재하는지 조회 -->
	<select id="siBoardSearch" parameterType="Board" resultType="Board">
  		SELECT board_id, b_title, b_content, b_common_board, create_date
		FROM (
		      SELECT ROW_NUMBER() OVER (ORDER BY create_date) AS rn, b_title, b_content, board_id, b_common_board, create_date
		      FROM board
		      WHERE b_title LIKE '%' || #{keyWord} || '%'
		       OR b_content LIKE '%' || #{keyWord} || '%'
		      )
		WHERE rn BETWEEN #{start} AND #{end}
	</select>
	
	
	<!-- 인기 검색어 조회 -->
	<select id="siGetPopularSearches" parameterType="CondDTO" resultType="Search">
		<![CDATA[
			SELECT s_keyword
            FROM (
                  SELECT *
                  FROM Search
                  WHERE modified_date BETWEEN 
                        TO_DATE(#{startOfToday , jdbcType=VARCHAR}, 'YYYY-MM-DD HH24:MI:SS') AND 
                        TO_DATE(#{endOfToday   , jdbcType=VARCHAR}, 'YYYY-MM-DD HH24:MI:SS')
	              ORDER BY s_count DESC,
	              CASE WHEN REGEXP_LIKE(s_keyword, '^[가-힣]+$') THEN 0 ELSE 1 END,
	              CASE WHEN REGEXP_LIKE(s_keyword, '^[가-힣]+$') THEN s_keyword END,
	              CASE WHEN REGEXP_LIKE(s_keyword, '^[a-zA-Z]+$') THEN 0 ELSE 1 END, 
	              CASE WHEN REGEXP_LIKE(s_keyword, '^[a-zA-Z]+$') THEN s_keyword END,
	              s_keyword  ) 
            WHERE ROWNUM <= 10
 		
		]]>
	</select>
	
	<!-- 자동 완성 데이터 조회 -->
	<select id="siAutoTSearch" parameterType="java.lang.String" resultType="java.util.List">
		<![CDATA[
			SELECT DISTINCT SUBSTR(t_name, start_pos, end_pos - start_pos) as t_name
	        FROM (
                 SELECT t_name, LEVEL as word_num,
                        INSTR(' ' || t_name || ' ', ' ', 1, LEVEL) as start_pos,
                        INSTR(' ' || t_name || ' ', ' ', 1, LEVEL + 1) as end_pos
                 FROM Travel
                 CONNECT BY LEVEL <= LENGTH(t_name) - LENGTH(REPLACE(t_name, ' ', '')) + 1
                 ) words
            WHERE SUBSTR(t_name, start_pos, end_pos - start_pos) LIKE '%' || #{keyword} || '%'
		]]>
	</select>
	
	<select id="siAutoHSearch" parameterType="java.lang.String" resultType="java.util.List">
		<![CDATA[
			SELECT DISTINCT SUBSTR(h_name, start_pos, end_pos - start_pos) as h_name
            FROM (
                 SELECT h_name, LEVEL as word_num,
                        INSTR(' ' || h_name || ' ', ' ', 1, LEVEL) as start_pos,
                        INSTR(' ' || h_name || ' ', ' ', 1, LEVEL + 1) as end_pos
                 FROM House
                 CONNECT BY LEVEL <= LENGTH(h_name) - LENGTH(REPLACE(h_name, ' ', '')) + 1
                 ) words
            WHERE SUBSTR(h_name, start_pos, end_pos - start_pos) LIKE '%' || #{keyword} || '%'
		]]>
	</select>
	
	<select id="siAutoRSearch" parameterType="java.lang.String" resultType="java.util.List">
		<![CDATA[
			SELECT DISTINCT SUBSTR(r_name, start_pos, end_pos - start_pos) as r_name
            FROM (
                 SELECT r_name, LEVEL as word_num,
                        INSTR(' ' || r_name || ' ', ' ', 1, LEVEL) as start_pos,
                        INSTR(' ' || r_name || ' ', ' ', 1, LEVEL + 1) as end_pos
                 FROM Restaurant
                 CONNECT BY LEVEL <= LENGTH(r_name) - LENGTH(REPLACE(r_name, ' ', '')) + 1
                 ) words
            WHERE SUBSTR(r_name, start_pos, end_pos - start_pos) LIKE '%' || #{keyword} || '%'
		]]>
	</select>
	
	
	
	<!-- 검색 횟수를 기준으로 인기 명소 구하기  -->
	<select id="sigetPopularT" resultType="Travel">
		<![CDATA[
		 	SELECT travel.travel_id, travel.t_name
		 	,max(tra_Img.img_stored_file) img_stored_file     
		 	FROM   
		        (
				 SELECT *
		         FROM (
		               SELECT *
		               FROM Travel
		               ORDER BY t_count DESC NULLS LAST
		               )
		         WHERE ROWNUM <= 6        
		        )  Travel, Tra_Img
		 	WHERE travel.travel_id = Tra_Img.travel_id
		 	group by travel.travel_id,travel.t_name
		]]>
	</select>
	
	<!-- 검색 횟수를 기준으로 인기 숙소 구하기  -->
	<select id="sigetPopularH" resultType="House">
		<![CDATA[
		 	SELECT house.house_id, house.h_name
		 	 , max(hou_Img.img_stored_file) img_stored_file     
		 	FROM   
		        (
				 SELECT *
		         FROM (
		               SELECT *
		               FROM House
		               ORDER BY h_count DESC NULLS LAST
		               )
		         WHERE ROWNUM <= 6        
		        )  House, Hou_Img
		 	WHERE house.house_id = hou_Img.house_id
		 	group by house.house_id, house.h_name
		]]>
	</select>
	
	<!-- 검색 횟수를 기준으로 인기 맛집 구하기  -->
	<select id="sigetPopularR" resultType="Res">
		<![CDATA[
		 	SELECT restaurant.restaurant_id , restaurant.r_name
		 	, max(Res_Img.img_stored_file) img_stored_file     
		 	FROM   
		        (
				 SELECT *
		         FROM (
		               SELECT *
		               FROM Restaurant
		               ORDER BY r_count DESC NULLS LAST
		               )
		         WHERE ROWNUM <= 6        
		        )  Restaurant, Res_Img
		 	WHERE restaurant.restaurant_id = Res_Img.restaurant_id
		 	group by restaurant.restaurant_id,restaurant.r_name
		]]>
	</select>
	
	
	<!-- 여행지 검색 개수 구하기 -->
	<select id="SiGetTravelCount" parameterType="Travel" resultType="int">
		SELECT COUNT(*) FROM Travel
		WHERE t_name    LIKE '%' || #{keyword} || '%' OR
              t_content LIKE '%' || #{keyword} || '%' OR
              t_address LIKE '%' || #{keyword} || '%'
	</select>
	
	<!-- 숙소 검색 개수 구하기 -->
	<select id="SiGetHouseCount" parameterType="House" resultType="int">
		SELECT COUNT(*) FROM House
		WHERE h_name    LIKE '%' || #{keyword} || '%' OR
              h_content LIKE '%' || #{keyword} || '%' OR
              h_address LIKE '%' || #{keyword} || '%'
	</select>
	
	<!-- 맛집 검색 개수 구하기 -->
	<select id="SiGetResCount" parameterType="Res" resultType="int">
		SELECT COUNT(*) FROM Restaurant
		WHERE r_name    LIKE '%' || #{keyword} || '%' OR
              r_content LIKE '%' || #{keyword} || '%' OR
              r_address LIKE '%' || #{keyword} || '%' OR
              r_menu    LIKE '%' || #{keyword} || '%' 
	</select>
	
	<!-- 커뮤니티 검색 개수 구하기 -->
	<select id="SiGetBoardCount" parameterType="Board" resultType="int">
		SELECT COUNT(*) FROM Board
		WHERE b_title   LIKE '%' || #{keyWord} || '%' OR
              b_content LIKE '%' || #{keyWord} || '%' 
	</select>
	
	<!-- 회원의 최근 검색어 개수 구하기 -->
	<select id="siRecentCount" parameterType="RecentSearch" resultType="int">
		SELECT COUNT(*) FROM RecentSearch
		WHERE member_id = ${member_id}
	</select>
	
	<!-- 회원의 최근 검색어 중 가장 오래된 검색어 삭제 -->
	<delete id="siDeleteRecent" parameterType="RecentSearch">
		DELETE FROM RecentSearch
        WHERE (member_id, create_date) IN 
              (SELECT member_id, MIN(create_date)
               FROM RecentSearch
               WHERE member_id = #{member_id}
               GROUP BY member_id
               )
	</delete>
	
	<!-- 회원이 새로 검색한 검색어 저장 -->
	<insert id="siInsertRecent" parameterType="RecentSearch">
		INSERT INTO RecentSearch (RECENT_ID, MEMBER_ID, SEARCH_TERM, CREATE_DATE)
		                  VALUES (RECENTSEARCH_ID_SEQ.nextval, #{member_id}, #{search_term}, sysdate)
	</insert>
	
	<!-- 회원이 검색한 검색어가 테이블에 존재하는지 확인 -->
	<select id="siFindRecent" parameterType="RecentSearch" resultType="int">
		SELECT COUNT(*)
		FROM RecentSearch
		WHERE member_id = #{member_id} AND search_term = #{search_term}
		
	</select>
	
	<!-- 회원의 최근 검색어 목록 구하기 -->
	<select id="siRecentList" parameterType="RecentSearch" resultType="RecentSearch">
		SELECT * 
		FROM RecentSearch
		WHERE member_id = #{member_id}
		ORDER BY create_date ASC
	</select>
	
	<!-- 회원 탈퇴 시 최근 검색어 목록 존재 여부 조회 -->
	<select id="searchRecentKeyword" parameterType="long" resultType="int">
		SELECT COUNT(*) FROM RecentSearch
		WHERE member_id = ${id}
	</select>
	
	<!-- 회원 탈퇴 시 최근 검색어 목록 삭제 -->
	<delete id="deleteByMemberWithdrawal" parameterType="long">
		DELETE 
		FROM RecentSearch
		WHERE member_id = #{id}
	</delete>
	
	
</mapper>